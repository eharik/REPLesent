| \*\bHigher-Order Functions -> Folds -> Monoids



| \rOKC FP Meetup



| \bElliot Harik
| \b Oseberg, Inc.

---


| \*\bOverview\s




- Scala Syntax Primer
- Higher-Order Functions
- Folds
- Associativity
- Monoids
- Why Should I Care?




---

| \*\bScala Syntax Primer

                                                  
\BFunction Definition

```
def isEven(x: Int): Boolean
```
--

```
def isEven(x: Int): Boolean = x % 2 == 0
```
--

\BFunctions as Values

```
val isEvenVal: Int => Boolean
```
--

```
val isEvenVal: Int => Boolean =
  (x: Int) => { x % 2 == 0 }
```
--

```
val isEvenVal: Int => Boolean =
  _ % 2 == 0
```
---

| \*\bScala Syntax Primer (cont'd)
                                                 

\BTypes, Generics

\rScala's Type System is \*Complex!

\yJust remember that square brackets indicate a type.

```
val list: List[Int]
```
--


< \BCurrying

< \yGoing to avoid currying in this pitch for the sake
< \y  of simplicity.  Many of the functions shown here
< \y  are curried in Scala's standard library.
---

| \*\bScala Syntax Primer (cont'd)
                                                 

< \BPattern Matching

--
```
val myTree: Tree[A] = ...

myTree match {
  case Leaf(a) => ...
  case Node(leftLeaf, rightLeaf) => ...
}
```
--

```
val myList: List[A] = ...

myList match {
  case Nil => ...
  case head :: tail => /* i.e. Cons(head, tail) */ ...
}
```
---

| \*\bHigher-Order Functions
                                                 



\yA higher-order function is a function that
\y  does either (or both!):

\y  - Accepts a function as an input
\y  - Returns a function as a result





---

| \*\bHigher-Order Functions (cont'd)
                                                 

< \BAccepting a Function


```
def map[A, B](f: A => B, as: List[A]): List[B]
```
--

```
def map[A, B](f: A => B, as: List[A]): List[B] = {

  def go(in: List[A], out: List[B]): List[B] = in match {
    case Nil => out
    case h :: t => f(h) +: go(t, out)
  }

  go(as, List[B]())
}

```
---

| \*\bHigher-Order Functions (cont'd)
                                                 


< \BReturning a Function


```
def timesN(n: Int): Int => Int
```
--

```
def timesN(n: Int): Int => Int = _ * n
```




---

| \*\bHigher-Order Functions (cont'd)
                                                 

< \BAccepting and Returning a Function


```
def compose[A, B, C](
    f: A => B,
    g: B => C)
  : A => C
```
--

```
def compose[A, B, C](
    f: A => B,
    g: B => C)
  : A => C =
  (a: A) => g(f(a))
```
---
| \*\bFolds
                                                 

\yA fold is a higher-order function that transforms a
\y  collection by applying a binary operator (the
\y  function passed into the fold as a parameter) to
\y  all elements of the collection starting with some
\y  seed, or "zero", value.


```
def fold[A, B](
    as: List[A],
    zero: B,
    op: (A, B) => B): B
```
--

```
def fold[A, B](
    as: List[A],
    zero: B,
    op: (A, B) => B): B = as match {
  case Nil => zero
  case h :: t => op(h, fold[A, B](t, zero, op))
}
```
---
| \*\bFolds (cont'd)
                                                 


< \BExample, Sum



```

val sumSeed = 0

val sumOp = (x: Int, y: Int) => x + y

def sum(ints: List[Int]): Int =
  fold(ints, sumSeed, sumOp)

```

---
| \*\bFolds (cont'd)
                                                 

< \BExpanded Sum Example

\wfold(List(17, 5, 13, 7), 0, sumOp)
--
\wsumOp(17, fold(List(5, 13, 7), 0, sumOp))
--
\wsumOp(17, sumOp(5, fold(List(13, 7), 0, sumOp)))
--
\wsumOp(17, sumOp(5, sumOp(13, fold(List(7), 0, sumOp))))
--
\wsumOp(17, sumOp(5, sumOp(13, sumOp(7, fold(Nil, 0, sumOp)))))
--
\wsumOp(17, sumOp(5, sumOp(13, sumOp(7, O))))
--
\wsumOp(17, sumOp(5, sumOp(13, 7 + 0)))
--
\wsumOp(17, sumOp(5, sumOp(13, 7)))
--
\wsumOp(17, sumOp(5, 13 + 7))
--
\wsumOp(17, sumOp(5, 20))
--
\wsumOp(17, 5 + 20)
--
\wsumOp(17, 25)
--
\w17 + 25
--
\w42
```
---
| \*\bFolds (cont'd)
                                                 


< \BExample, Product



```

val productSeed = 1

val productOp = (x: Int, y: Int) => x * y

def product(ints: List[Int]): Int =
  fold(ints, productSeed, productOp)
```

---
| \*\bFolds (cont'd)
                                                 


< \BExample, Division



```
val op = (x: Int, y: Double) => x / y

val seed = 1D

def divide(ints: List[Int]): Double =
  fold(ints, seed, op)
```
---

| \*\bFolds (cont'd)
                                                 

\BA Special Case, Reduce

\yIf we know the list is non-empty and the output is 
\y  the same type as the input then we can simply 
\y  "reduce" the collection based on a binary operator:

```
def reduce[A](as: List[A], op: A => A): A
```
--

```
def reduce[A](as: List[A], op: (A, A) => A): A = {

  def go(in: List[A], out: A): A = in match {
    case Nil => out
    case h :: t => go(t, op(h, out))
  }

  go(as.tail, as.head)
}
```
---
| \*\bAssociativity



                                                 
\ySome binary operators used in folds are associative.
\y  In these cases we can parallelize a fold operation,
\y  for example:


| \wa0 + a1 + a2 + a3 = (a0 + a1) + (a2 + a3)


--
\yIn the above example we can execute \w(a0 + a1) \yand
\w  (a2 + a3)\y on separate processors.  If we have
\y  multiple processors and an expensive operation or
\y  a huge collection this can yield significant 
\y  performance improvements.
---
| \*\bMonoids
                                                 
                                                 
\yA monoid is a combination of some type, A, a seed
\y  (or "zero") for that type, and an associative
\y   binary operator.  Concretely:


--
```
trait Monad[A] {
  def op(a1: A, a2: A): A
  def zero: A
}
```
--

\yIn addition to the associativity of \wop\y, for 
\y  any \*\wA \s\ythe following must hold:

```
op(a, zero) == a == op(zero, a)
```
--

\g:heavy_check_mark: integer sum
\g:heavy_check_mark: integer product
\r:heavy_multiplication_x: integer division
---
| \*\bWhy Should You Care?
                                                 


\yHigher-order functions help create reusable and
\y  composable operators.  They bring us closer to a
\y  declarative approach a la \wmap, fold, filter.

--


\yFolds are a super useful tool from which many more
\y  complex operations can be built.  Any time you 
\y  you find yourself collapsing a collection via a 
\y  binary operator see if a \wfold \ywill do the trick!

---
| \*\bWhy Should You Care? (cont'd)



\yMonoids!  Monoids are but one of many algabraic
\y  structures that can be utilized in functional
\y  programming.  You may have heard of others like
\y  functors or monads.


\yLike many other tools available to you as a 
\y  developer, being able to identify monoids (or
\y  other algabraic structures) gives you further
\y  insight into how to solve problems and 
\y  communicate about the problem space with your
\y  peers.

---

| \*\bCredits and Additional Info
                                                 
\yMuch of the motivation and information for this
\y  presentation came from "the red book", i.e.
\y  \_Functional Programming in Scala\s\y by Chiusano
\y  and Bjarnason.
https://www.manning.com/books/functional-programming-in-scala


\yThe blog series "learning Scalaz" by Eugene Yokota
\y  was also informative.
http://eed3si9n.com/learning-scalaz/Monoid.html


\yScott Wlaschin's posts are excellent:
https://fsharpforfunandprofit.com/posts/monoids-without-tears/

---

| \*\bQuestions?

---

| \*\bFolds
                                                 



< \BA More Complex Example, List Transformation


```
type Roaster = String

type Kilos = Long

type Price = Double

case class Order(
    coffeeName: String,
    roaster: Roaster,
    qty: Kilos,
    price: Price)
```
---

```
val addOrder =
  (x: Order, y: Map[Roaster, List[Order]]) => {
    val orders = 
      y.getOrElse(x.roaster, List.empty) :+ x
    y.updated(x.roaster, orders)
  }

val noOrders: Map[Roaster, List[Order]] = Map.empty

def groupByRoaster(orders: List[Order])
    : Map[Roaster, List[Order]] = 
  fold(orders, noOrders, addOrder)

```
---

```
val addToInvoice =
  (x: (Roaster, List[Order]), y: Map[Roaster, Price]) => {
    val orderCost = x._2.map(o => o.qty * o.price)
    y + ((x._1, orderCost.sum))
  }

val emptyInvoice: Map[Roaster, Price] = Map.empty

// use std lib fold on Map since ours is for List
def invoices(orders: List[Order]): Map[Roaster, Price] =
  groupByRoaster(orders)
    .foldRight(emptyInvoice)(addToInvoice)
```

---

```
val orders = List(
  Order("Yirgacheffe", "Elemental", 42, 2.0),
  Order("Kona", "Slingers", 25, 1.5),
  Order("Blue Mountain", "Slingers", 100, 1.33),
  Order("Gesha", "Elemental", 5, 10.0))
```
---
